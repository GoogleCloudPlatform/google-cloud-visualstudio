// Copyright 2017 Google Inc. All Rights Reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using GoogleCloudExtension.PublishDialogSteps.FlexStep;
using GoogleCloudExtensionUnitTests.PublishDialog;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading.Tasks;
using Moq;
using GoogleCloudExtension.DataSources;
using Google.Apis.Appengine.v1.Data;

namespace GoogleCloudExtensionUnitTests.PublishDialogSteps.FlexStep
{
    [TestClass]
    public class FlexStepViewModelTests : PublishDialogStepBaseTestsBase<FlexStepViewModel>
    {
        private TaskCompletionSource<Application> _getApplicationTaskSource;
        private Application _mockedApplication;
        private Mock<IGaeDataSource> _gaeDataSourceMock;

        protected override int RequieredAPIsForStep => 1;
        
        protected override FlexStepViewModel CreateStep()
        {
            return FlexStepViewModel.CreateStep(apiManager: _apiManagerMock.Object, pickProjectPrompt: _pickProjectPromptMock.Object);
        }

        [TestInitialize]
        public override void BeforeEach()
        {
            base.BeforeEach();

            _gaeDataSourceMock = new Mock<IGaeDataSource>();
            _gaeDataSourceMock.Setup(x => x.GetApplicationAsync()).Returns(() => _getApplicationTaskSource.Task);
            _mockedApplication = Mock.Of<Application>();
        }

        [TestMethod]
        public override void TestOnVisibleLoadingProject()
        {
            GoToLongRunningValidationDefaultProjectState();

            AssertSelectedProjectUnchanged();
            AssertExpectedVisibleState();
        }

        protected override void InitPositiveValidationMocks()
        {
            base.InitPositiveValidationMocks();
            InitGetApplicationMock(_mockedApplication);
        }

        protected override void InitNegativeValidationMocks()
        {
            base.InitNegativeValidationMocks();
            InitGetApplicationMock(null);
        }

        protected override void InitLongRunningValidationMocks()
        {
            base.InitLongRunningValidationMocks();
            InitLongRunningGetApplicationMock();
        }

        protected void InitGetApplicationMock(Application application)
        {
            _getApplicationTaskSource = new TaskCompletionSource<Application>();
            _getApplicationTaskSource.SetResult(application);
        }

        protected void InitLongRunningGetApplicationMock()
        {
            _getApplicationTaskSource = new TaskCompletionSource<Application>();
        }

        protected override void SetInitialStateExpectedValues()
        {
            base.SetInitialStateExpectedValues();
        }

        protected override async Task GoToNoProjectState()
        {
            await base.GoToNoProjectState();
        }

        protected override async Task GoToValidDefaultProjectState()
        {
            await base.GoToValidDefaultProjectState();

            _expectedCanPublish = true;
        }

        protected override async Task GoToInvalidDefaultProjectState()
        {
            await base.GoToInvalidDefaultProjectState();

            _expectedNeedsApiEnabled = true;
            _expectedEnableApiCommandCanExecute = true;
            _expectedShowInputControls = false;
        }

        protected override void GoToLongRunningValidationDefaultProjectState()
        {
            base.GoToLongRunningValidationDefaultProjectState();

            _expectedProjectId = DefaultProjectId;
            _expectedLoadingProject = true;
            _expectedShowInputControls = false;
        }

        protected override async Task TransitionToNoProjectExternal()
        {
            await base.TransitionToNoProjectExternal();
        }

        protected override async Task TransitionToTargetValidProjectExternal()
        {
            await base.TransitionToTargetValidProjectExternal();

            _expectedCanPublish = true;
        }

        protected override async Task TransitionToTargetInvalidProjectExternal()
        {
            await base.TransitionToTargetInvalidProjectExternal();

            _expectedNeedsApiEnabled = true;
            _expectedEnableApiCommandCanExecute = true;
            _expectedShowInputControls = false;
        }

        protected override async Task TransitionToTargetValidProjectSelectCommand()
        {
            await base.TransitionToTargetValidProjectSelectCommand();

            _expectedCanPublish = true;
        }

        protected override async Task TransitionToTargetInvalidProjectSelectCommand()
        {
            await base.TransitionToTargetInvalidProjectSelectCommand();

            _expectedNeedsApiEnabled = true;
            _expectedEnableApiCommandCanExecute = true;
            _expectedShowInputControls = false;
        }
    }
}
