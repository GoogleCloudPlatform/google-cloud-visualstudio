<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:presentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options">

    <!-- Section link button style for clone, create, disconnect buttons -->
    <Color x:Key="SectionButtonColor">#FF0E70C0</Color>
    <SolidColorBrush x:Key="SectionButtonBrush" Color="{StaticResource SectionButtonColor}" presentationOptions:Freeze="true" />

    <Style x:Key="SectionHyperLinkStyle" TargetType="{x:Type Hyperlink}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsMouseOver" Value="false" />
                    <Condition Property="IsEnabled" Value="true" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="TextDecorations" Value="None" />
                    <Setter Property="FrameworkElement.Cursor" Value="None" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="IsEnabled" Value="true" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="TextDecorations" Value="Underline" />
                    <Setter Property="FrameworkElement.Cursor" Value="Hand" />
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="false" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="TextDecorations" Value="None" />
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="SectionButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="Foreground" Value="{StaticResource SectionButtonBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock>
                        <Hyperlink 
                            Command="{TemplateBinding Command}"
                            CommandParameter="{TemplateBinding CommandParameter}"
                            Foreground="{TemplateBinding Foreground}"
                            Style="{StaticResource SectionHyperLinkStyle}">

                            <Run Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />

                        </Hyperlink>
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Vertical Separator Style -->
    <Color x:Key="HeaderSeparatorColor">#FFCFD6E5</Color>
    <SolidColorBrush x:Key="HeaderSeparatorBrush" Color="{StaticResource HeaderSeparatorColor}" />
    <SolidColorBrush x:Key="VsCommandBarHover" Color="#FFFDF4BF" />
    <SolidColorBrush x:Key="VsCommandBarSelectedBorder" Color="#FFE5C365" />

    <Style x:Key="VerticalSeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource HeaderSeparatorBrush}"/>
        <Setter Property="Margin" Value="3,0,3,0"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <RotateTransform Angle="90"/>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Repositories list styles -->
    <Style x:Key="RepositoriesListItemContainerStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="1"/>

        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ContextMenu" Value="{Binding ContextMenu, RelativeSource={RelativeSource Self}}"  />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                        <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource VsCommandBarHover}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource VsCommandBarSelectedBorder}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>