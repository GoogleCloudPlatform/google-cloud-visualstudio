<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:GoogleCloudExtension.Theming;assembly=GoogleCloudExtension">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="CommonResources.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- Colors for the dialog button for the various UI states. -->

    <!-- Normal state -->
    <SolidColorBrush x:Key="DialogButtonColors.Static.Background" Color="White"/>
    <SolidColorBrush x:Key="DialogButtonColors.Static.Border" Color="#FFBDBDBD"/>
    <SolidColorBrush x:Key="DialogButtonColors.Static.Foreground" Color="Black"/>

    <!-- Mouse over state -->
    <SolidColorBrush x:Key="DialogButtonColors.MouseOver.Background" Color="White"/>
    <SolidColorBrush x:Key="DialogButtonColors.MouseOver.Border" Color="#FF82B1FF"/>
    <SolidColorBrush x:Key="DialogButtonColors.MouseOver.Foreground" Color="Black"/>

    <!-- Pressed state -->
    <SolidColorBrush x:Key="DialogButtonColors.Pressed.Background" Color="#FFF5F5F5"/>
    <SolidColorBrush x:Key="DialogButtonColors.Pressed.Border" Color="#FF82B1FF"/>
    <SolidColorBrush x:Key="DialogButtonColors.Pressed.Foreground" Color="Black"/>

    <!-- Disabled state -->
    <SolidColorBrush x:Key="DialogButtonColors.Disabled.Background" Color="#FFE0E0E0"/>
    <SolidColorBrush x:Key="DialogButtonColors.Disabled.Border" Color="#FFBDBDBD"/>
    <SolidColorBrush x:Key="DialogButtonColors.Disabled.Foreground" Color="#FF9E9E9E"/>

    <!-- The dialog button visuals. -->
    <Style x:Key="DialogFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DialogButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Blue" />
        <Setter Property="Width" Value="96px" />
        <Setter Property="Margin" Value="6,0,0,0" />
        <Setter Property="Height" Value="25px" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource DialogFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource DialogButtonColors.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource DialogButtonColors.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource DialogButtonColors.Static.Foreground}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true" CornerRadius="2">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          TextElement.FontSize="10px"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource DialogButtonColors.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource DialogButtonColors.MouseOver.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource DialogButtonColors.MouseOver.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource DialogButtonColors.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource DialogButtonColors.Pressed.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource DialogButtonColors.Pressed.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource DialogButtonColors.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource DialogButtonColors.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource DialogButtonColors.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for wide buttons. -->
    <Style x:Key="DialogButtonWide" BasedOn="{StaticResource DialogButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="96px" />
    </Style>

    <!-- Style for the standard buttons. -->
    <Style x:Key="DialogButtonStandard" BasedOn="{StaticResource DialogButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="75px" />
    </Style>

    <!-- Styles for the dialog. -->

    <!-- Style for the background of the dialog. -->
    <Style x:Key="DialogBackgroundStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="#FFEEEEEE" />
        <Setter Property="Padding" Value="12" />
    </Style>

    <!-- Style for the row of buttons. -->
    <Style x:Key="DialogButtonBar" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="0,18,0,12" />
    </Style>

    <!-- Button templates. -->

    <!-- Template to display the button using the wide size. -->
    <DataTemplate x:Key="DialogButtonTemplateWide">
        <Button Style="{StaticResource DialogButtonWide}"
                Command="{Binding Command}"
                IsDefault="{Binding IsDefault}"
                Content="{Binding Caption}"
                IsCancel="{Binding IsCancel}" />
    </DataTemplate>

    <!-- Template to display the button in the standard size. -->
    <DataTemplate x:Key="DialogButtonTemplateStandard">
        <Button Style="{StaticResource DialogButtonStandard}"
                Command="{Binding Command}"
                IsDefault="{Binding IsDefault}"
                Content="{Binding Caption}"
                IsCancel="{Binding IsCancel}" />
    </DataTemplate>

    <!-- Common visuals for the dialogs. -->
    
    <!-- The template selector to decide what button style to apply. -->
    <local:ButtonTemplateSelector x:Key="DialogButtonTemplateSelector" />

    <!-- The dialog visuals. -->
    <Style TargetType="{x:Type local:CommonDialogWindowBaseContent}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CommonDialogWindowBaseContent}">

                    <Border Style="{StaticResource DialogBackgroundStyle}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="auto" />
                            </Grid.RowDefinitions>

                            <!-- The actual content displayed in the dialog. -->
                            <ContentPresenter Content="{TemplateBinding Content}" />

                            <!-- The row of buttons. -->
                            <Border Grid.Row="1" Style="{StaticResource DialogButtonBar}">
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                    <local:ButtonsList ItemsSource="{Binding Buttons.Collection, RelativeSource={RelativeSource TemplatedParent}}"
                                                       ItemTemplateSelector="{StaticResource DialogButtonTemplateSelector}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </local:ButtonsList>
                                </StackPanel>
                            </Border>

                        </Grid>
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>