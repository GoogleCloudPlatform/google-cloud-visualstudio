<UserControl xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:utils="clr-namespace:GoogleCloudExtension.Utils;assembly=GoogleCloudExtension.Utils"
             xmlns:CloudExplorer="clr-namespace:GoogleCloudExtension.CloudExplorer"
             xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.14.0"
             xmlns:controls="clr-namespace:GoogleCloudExtension.Controls"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.AeroLite" x:Class="GoogleCloudExtension.CloudExplorer.CloudExplorerToolWindowControl"
             xmlns:crm="clr-namespace:Google.Apis.CloudResourceManager.v1.Data;assembly=Google.Apis.CloudResourceManager.v1"
             Background="{DynamicResource VsBrush.Window}"
             Foreground="{DynamicResource VsBrush.WindowText}"
             mc:Ignorable="d"
             d:DesignHeight="700" d:DesignWidth="300"
             d:DataContext="{d:DesignInstance {x:Type CloudExplorer:CloudExplorerViewModel}}">

    <UserControl.Resources>
        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Theming/CommonResources.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!-- Common visiblity converter, use this common instance in all data templates, instead of creating a new one. -->
            <utils:VisibilityConverter x:Key="visibilityConverter" />

            <!-- Data templates for the various data sources shown in the Cloud Explorer. -->

            <!-- Common node template, defines the UI for all nodes. -->
            <DataTemplate x:Key="nodeTemplate">
                <Grid>
                    <StackPanel Orientation="Horizontal">
                        <controls:ProgressIndicator Visibility="{Binding IsLoading, Converter={StaticResource visibilityConverter}}" />

                        <!-- Message icons, warning and error. -->
                        <Image Source="{x:Static CloudExplorer:TreeNode.ErrorIcon}"
                           Height="16" Width="16"
                           VerticalAlignment="Center"
                           Visibility="{Binding IsError, Converter={StaticResource visibilityConverter}}"
                           Margin="0,0,5,0"/>
                        <Image Source="{x:Static CloudExplorer:TreeNode.WarningIcon}"
                           Height="16" Width="16"
                           VerticalAlignment="Center"
                           Visibility="{Binding IsWarning, Converter={StaticResource visibilityConverter}}"
                           Margin="0,0,5,0"/>

                        <!-- Custom icon for the node. -->
                        <Image Source="{Binding Icon}"
                           Height="16" Width="16"
                           VerticalAlignment="Center"
                           Visibility="{Binding IconIsVisible, Converter={StaticResource visibilityConverter}}"
                           Margin="0,0,5,0"/>

                        <!-- The actual caption. -->
                        <TextBlock Text="{Binding Caption}"
                               VerticalAlignment="Center"/>
                    </StackPanel>
                </Grid>
            </DataTemplate>

            <!-- Data template to be applied to the TreeHierarchy, which are the nodes that have children. -->
            <HierarchicalDataTemplate DataType="{x:Type CloudExplorer:TreeHierarchy}" ItemsSource="{Binding Children}">
                <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource nodeTemplate}" />
            </HierarchicalDataTemplate>

            <!-- Data template to be applied to the TreeLeaf, which terminate the hierarchy as they don't have children. -->
            <DataTemplate DataType="{x:Type CloudExplorer:TreeLeaf}">
                <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource nodeTemplate}" />
            </DataTemplate>

            <!-- Data template to be applied to the link leaf, which terminate the nodes and shows a link. -->
            <DataTemplate DataType="{x:Type CloudExplorer:TreeLeafLink}">
                <TextBlock Focusable="False">
                <Hyperlink Focusable="False" Command="{Binding NavigateCommand}" Style="{StaticResource CommonHyperlinkStyle}">
                    <TextBlock Focusable="False" Text="{Binding Caption}" />
                </Hyperlink>
            </TextBlock>
            </DataTemplate>

            <!-- Data template for the GCP project. -->
            <DataTemplate DataType="{x:Type crm:Project}">
                <TextBlock>
                    <TextBlock.Text>
                        <MultiBinding StringFormat="{}{0} ({1}:{2})">
                            <Binding Path="Name" />
                            <Binding Path="ProjectId" />
                            <Binding Path="ProjectNumber" />
                        </MultiBinding>
                    </TextBlock.Text>
                </TextBlock>
            </DataTemplate>

            <!-- Data template for a placeholder message. -->
            <DataTemplate DataType="{x:Type utils:PlaceholderMessage}">
                <TextBlock Text="{Binding Message}" />
            </DataTemplate>

            <!-- Styles for the various UI elements and controls in the Cloud Explorer. -->

            <!-- Style to be applied to the command bar, uses the right theming resource keys. -->
            <Style x:Key="CommandBarStyle" TargetType="{x:Type StackPanel}">
                <Setter Property="Orientation" Value="Horizontal" />
                <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarGradientKey}}" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
            </Style>

            <!-- Style for the command bar buttons, ensures the right size and look. -->
            <Style x:Key="CommandBarButtonStyle"
               TargetType="{x:Type Button}"
               BasedOn="{StaticResource {x:Static vsshell:VsResourceKeys.ButtonStyleKey}}">
                <Setter Property="Padding" Value="0" />
                <Setter Property="Width" Value="20px" />
                <Setter Property="Height" Value="20px" />
                <Setter Property="MinWidth" Value="20px" />
                <Setter Property="MinHeight" Value="20px" />
                <Setter Property="Margin" Value="2.5,0,0,0" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Image Source="{Binding}" Width="16px" Height="16px" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controls:PressButton}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarHoverKey}}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="Transparent" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarSelectedBorderKey}}"/>
                                    <Setter Property="BorderThickness" TargetName="border" Value="3" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="border" Value="#FFF4F4F4"/>
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- The styles for the TreeViewItem. -->

            <!-- Referenced by the modified TreeViewItem template, it is unmodifed from the one generated by the VS tooling. -->
            <Style x:Key="TreeViewItemToggleButton_Style" TargetType="{x:Type ToggleButton}">
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid Background="Transparent" Height="13" Margin="0,1,0,0" Width="15">
                                <Path x:Name="Collapsed" Data="M 0,9 C0,9 5,4.5 5,4.5 5,4.5 0,0 0,0 0,0 0,9 0,9 z" HorizontalAlignment="Left" Height="9" Margin="2,1,1,1" Opacity="0.4" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" VerticalAlignment="Center" Width="5"/>
                                <Path x:Name="Expanded" Data="M 0,6 C0,6 6,6 6,6 6,6 6,0 6,0 6,0 0,6 0,6 z" Fill="#FFA3A3A3" HorizontalAlignment="Left" Height="6" Margin="1,2,1,1" Stretch="Fill" SnapsToDevicePixels="True" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Visibility="Hidden" VerticalAlignment="Center" Width="6"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter Property="Visibility" TargetName="Collapsed" Value="Hidden"/>
                                    <Setter Property="Visibility" TargetName="Expanded" Value="Visible"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- TreeItemView style used to set the binding property and replace the colors to use the themed ones. -->
            <Style x:Key="CloudExlorerTreeItemViewStyle" TargetType="{x:Type TreeViewItem}">
                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                <Setter Property="Foreground" Value="{DynamicResource VsBrush.WindowText}"/>
                <Setter Property="ContextMenu" Value="{Binding Header.ContextMenu, RelativeSource={RelativeSource Self}}" />
                <EventSetter Event="TreeViewItem.PreviewMouseRightButtonDown" Handler="TreeViewItem_PreviewMouseRightButtonDown" />
                <EventSetter Event="TreeViewItem.ContextMenuOpening" Handler="TreeViewItem_ContextMenuOpening" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="18"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" MinHeight="21"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2"/>
                                <Border x:Name="Bd" Grid.Column="1" Margin="{TemplateBinding Padding}">
                                    <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                                </Border>
                                <ToggleButton x:Name="Expander" ClickMode="Press" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource TreeViewItemToggleButton_Style}"/>
                                <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.Row="1" Visibility="Collapsed"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <!-- Sets the background and foreground for selected case, with focus. -->
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="IsSelectionActive" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource {x:Static vsshell:VsBrushes.StartPageSelectedItemBackgroundKey}}"/>
                                    <Setter Property="Foreground" Value="White"/>
                                </MultiTrigger>

                                <!-- Sets the background and foreground for selected case, no focus. -->
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="IsSelectionActive" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Border" Value="{DynamicResource {x:Static vsshell:VsBrushes.FileTabInactiveDocumentBorderBackgroundKey}}"/>
                                    <Setter Property="Foreground" Value="White"/>
                                </MultiTrigger>

                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsExpanded" Value="True"/>
                                        <Condition Property="HasItems" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Visibility" TargetName="ItemsHost" Value="Visible"/>
                                </MultiTrigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="HasHeader" Value="false"/>
                                        <Condition Property="Width" Value="Auto"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="MinWidth" TargetName="PART_Header" Value="75"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="HasHeader" Value="false"/>
                                        <Condition Property="Height" Value="Auto"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="MinHeight" TargetName="PART_Header" Value="21"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Style of the TreeView used in the Cloud Explorer. -->
            <Style x:Key="CloudExplorerTreeViewStyle" TargetType="{x:Type TreeView}">
                <Setter Property="Background" Value="{DynamicResource VsBrush.Window}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static vsshell:VsBrushes.PanelBorderKey}}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Foreground" Value="{DynamicResource VsBrush.WindowText}"/>
                <Setter Property="ItemContainerStyle" Value="{StaticResource CloudExlorerTreeItemViewStyle}" />
            </Style>

        </ResourceDictionary>

    </UserControl.Resources>

    <Grid IsEnabled="{Binding IsReady}">
        <Grid.RowDefinitions>
            <!-- This row contains the button bar. -->
            <RowDefinition Height="25" />

            <!-- This row contains the project switcher. -->
            <RowDefinition Height="Auto" />

            <!-- This row contains the tree. -->
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Action buttons. -->
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!-- Background for the buttons -->
            <Border Grid.ColumnSpan="2"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Stretch"
                    Background="{DynamicResource {x:Static vsshell:VsBrushes.CommandBarGradientKey}}"/>

            <!-- First the buttons instantiated from the sources -->
            <ItemsControl ItemsSource="{Binding Buttons}"
                          Focusable="False"
                          Visibility="{Binding IsValidInstallation, Converter={StaticResource visibilityConverter}}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Style="{StaticResource CommandBarStyle}" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <controls:PressButton Content="{Binding Icon}"
                                              Command="{Binding Command}"
                                              VerticalAlignment="Center"
                                              ToolTip="{Binding ToolTip}"
                                              IsChecked="{Binding IsChecked}"
                                              IsEnabled="{Binding IsEnabled}"
                                              Style="{StaticResource CommandBarButtonStyle}" />
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <!-- The profile button -->
            <controls:PressButton Grid.Column="1"
                                  Content="{Binding ProfilePictureAsync.Value}"
                                  Command="{Binding ManageAccountsCommand}"
                                  ToolTip="{Binding ProfileNameAsync.Value}"
                                  Style="{StaticResource CommandBarButtonStyle}"
                                  HorizontalAlignment="Right"
                                  Margin="5,0">
                <controls:PressButton.ContentTemplate>
                    <DataTemplate>
                        <Image Source="{Binding}" Width="25px" Height="25px" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </DataTemplate>
                </controls:PressButton.ContentTemplate>
            </controls:PressButton>
        </Grid>

        <!-- Project switcher. -->
        <ComboBox ItemsSource="{Binding EffectiveProjects}"
                  IsEnabled="{Binding IsNotEmptyState}"
                  SelectedItem="{Binding CurrentProject}"
                  SelectedIndex="0"
                  Grid.Row="1"
                  Style="{DynamicResource {x:Static vsshell:VsResourceKeys.ComboBoxStyleKey}}" />

        <!-- Message for the empty state -->
        <Grid HorizontalAlignment="Stretch"
              VerticalAlignment="Stretch"
              Visibility="{Binding IsEmptyState, Converter={utils:VisibilityConverter}}"
              Grid.Row="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="20*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="80*" />
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="1"
                    Visibility="Visible"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center">
                <TextBlock Text="{Binding EmptyStateMessage}"  HorizontalAlignment="Center"  TextWrapping="Wrap"/>
                <TextBlock HorizontalAlignment="Center">
                    <Hyperlink Command="{Binding EmptyStateCommand}" Style="{StaticResource CommonHyperlinkStyle}">
                        <TextBlock Text="{Binding EmptyStateButtonCaption}" />
                    </Hyperlink>
                </TextBlock>
            </StackPanel>
        </Grid>

        <!-- Hierarchical view of the items, with the subitems inside. -->
        <TreeView
            x:Name="_treeView"
            ItemsSource="{Binding Roots}"
            SelectedItemChanged="TreeView_SelectedItemChanged"
            KeyDown="TreeView_KeyDown"
            Visibility="{Binding IsEmptyState, Converter={utils:VisibilityConverter IsNegated=True}}"
            utils:ControlBehaviors.DoubleClickCommand="{Binding DoubleClickCommand}"
            utils:ControlBehaviors.DoubleClickCommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource Self}}"
            Grid.Row="2"
            Style="{StaticResource CloudExplorerTreeViewStyle}" />

    </Grid>
</UserControl>
